# Docker Compose 配置文件
version: '3.8'

services:
  # 后端API服务
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongo:27017/im_system
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      - mongo
      - redis
    restart: unless-stopped
    networks:
      - im-network

  # 前端Web应用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:3001
      - REACT_APP_SOCKET_URL=http://localhost:3001
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - im-network

  # MongoDB数据库
  mongo:
    image: mongo:5.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=im_system
    volumes:
      - mongo_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - im-network

  # Redis缓存
  redis:
    image: redis:6.2-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - im-network

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - ./uploads:/usr/share/nginx/html/uploads
    depends_on:
      - api
      - frontend
    restart: unless-stopped
    networks:
      - im-network

  # ElasticSearch (用于消息搜索)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped
    networks:
      - im-network

  # 消息队列 (RabbitMQ)
  rabbitmq:
    image: rabbitmq:3.9-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    networks:
      - im-network

  # 监控服务 (Prometheus)
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - im-network

  # 监控可视化 (Grafana)
  grafana:
    image: grafana/grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - im-network

volumes:
  mongo_data:
  redis_data:
  elasticsearch_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:

networks:
  im-network:
    driver: bridge

---
# Kubernetes 部署配置

# 命名空间
apiVersion: v1
kind: Namespace
metadata:
  name: im-system

---
# MongoDB 部署
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: im-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:5.0
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongo-secret
              key: username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongo-secret
              key: password
        volumeMounts:
        - name: mongo-storage
          mountPath: /data/db
      volumes:
      - name: mongo-storage
        persistentVolumeClaim:
          claimName: mongo-pvc

---
# MongoDB 服务
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  namespace: im-system
spec:
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017

---
# Redis 部署
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: im-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:6.2-alpine
        ports:
        - containerPort: 6379
        args: ["redis-server", "--requirepass", "$(REDIS_PASSWORD)"]
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password

---
# API 部署
apiVersion: apps/v1
kind: Deployment
metadata:
  name: im-api
  namespace: im-system
spec:
  replicas: 3
  selector:
    matchLabels:
      app: im-api
  template:
    metadata:
      labels:
        app: im-api
    spec:
      containers:
      - name: im-api
        image: your-registry/im-api:latest
        ports:
        - containerPort: 3001
        env:
        - name: NODE_ENV
          value: "production"
        - name: MONGODB_URI
          value: "mongodb://mongodb-service:27017/im_system"
        - name: REDIS_URL
          value: "redis://redis-service:6379"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secret
              key: jwt-secret
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5

---
# API 服务
apiVersion: v1
kind: Service
metadata:
  name: im-api-service
  namespace: im-system
spec:
  selector:
    app: im-api
  ports:
  - port: 3001
    targetPort: 3001
  type: LoadBalancer

---
# 前端部署
apiVersion: apps/v1
kind: Deployment
metadata:
  name: im-frontend
  namespace: im-system
spec:
  replicas: 2
  selector:
    matchLabels:
      app: im-frontend
  template:
    metadata:
      labels:
        app: im-frontend
    spec:
      containers:
      - name: im-frontend
        image: your-registry/im-frontend:latest
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"

---
# 前端服务
apiVersion: v1
kind: Service
metadata:
  name: im-frontend-service
  namespace: im-system
spec:
  selector:
    app: im-frontend
  ports:
  - port: 80
    targetPort: 80
  type: LoadBalancer

---
# 配置映射
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: im-system
data:
  NODE_ENV: "production"
  LOG_LEVEL: "info"

---
# 密钥配置
apiVersion: v1
kind: Secret
metadata:
  name: app-secret
  namespace: im-system
type: Opaque
data:
  jwt-secret: # base64编码的JWT密钥
  aws-access-key: # base64编码的AWS访问密钥
  aws-secret-key: # base64编码的AWS密钥

---
# 持久化存储卷声明
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
  namespace: im-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
# 水平自动扩缩容
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: im-api-hpa
  namespace: im-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: im-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Nginx Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: im-ingress
  namespace: im-system
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - api.your-domain.com
    - your-domain.com
    secretName: im-tls-secret
  rules:
  - host: api.your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: im-api-service
            port:
              number: 3001
  - host: your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: im-frontend-service
            port:
              number: 80
